---
name: Docker Build images

run-name: Docker Build ${{ github.ref_name }} by @${{ github.actor }}

concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{ github.ref }}

on:
  pull_request:
    branches:
      - main
    paths-ignore:
      - "docs/**"

  push:
    branches:
      - main
    tags:
      - "[0-9]+.[0-9]+.[0-9]+*"

  workflow_dispatch:
    inputs:
      version:
        description: "Docker Image Version"
        required: false
        type: string

env:
  DOCKER_IMAGE_NAME: ${{ (github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && inputs.version) || startsWith(github.ref, 'refs/tags/') || (github.ref == 'refs/heads/main' && github.event_name != 'pull_request')) && 'zebby76/base-php' || 'zebby76/base-php-dev' }}

jobs:
  prepare:
    runs-on: ubuntu-24.04

    outputs:
      # Push if it's a scheduled job, a tag, or if we're committing to the main branch
      push: ${{ (github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && inputs.version) || startsWith(github.ref, 'refs/tags/') || (github.ref == 'refs/heads/main' && github.event_name != 'pull_request')) && true || false }}
      sbom: ${{ github.event_name != 'pull_request' }}
      provenance: ${{ github.event_name != 'pull_request' }}
      ref: ${{ steps.check.outputs.ref || (github.event_name == 'workflow_dispatch' && inputs.version) || '' }}
      platforms: ${{ steps.matrix.outputs.platforms }}
      targets: ${{ steps.matrix.outputs.targets }}
      variants: ${{ steps.matrix.outputs.variants }}
      metadata: ${{ steps.matrix.outputs.metadata }}
      skip: ${{ steps.check.outputs.skip }}

    steps:
      - name: Checks
        id: check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if the Docker images must be rebuilt
          if [[ "${GITHUB_EVENT_NAME}" != "schedule" ]]; then
              echo skip=false >> "${GITHUB_OUTPUT}"
              exit 0
          fi

          {
            echo ref="$(gh release view --repo zebby76/base-php --json tagName --jq '.tagName')"
            echo skip=false
          } >> "${GITHUB_OUTPUT}"

      - name: Checkout source
        uses: actions/checkout@v4
        if: ${{ !fromJson(steps.check.outputs.skip) }}
        with:
          ref: ${{ steps.check.outputs.ref }}

      - name: Set up Docker Buildx
        if: ${{ !fromJson(steps.check.outputs.skip) }}
        uses: docker/setup-buildx-action@v3

      - name: Create platforms, targets and variants matrix
        if: ${{ !fromJson(steps.check.outputs.skip) }}
        id: matrix
        shell: bash
        run: |
          set -e
          # shellcheck disable=SC2046,SC2086
          METADATA="$(docker buildx bake --print | jq -c)"
          {
            TARGET_KEYS=$(docker buildx bake --print | jq -r '.target | keys[]' | grep -E '.+-.')
            VARIANTS=$(echo "${TARGET_KEYS}" | cut -d'-' -f1 | sort -u)
            TARGETS=$(echo "${TARGET_KEYS}" | cut -d'-' -f2 | sort -u)
            echo metadata="${METADATA}"
            echo platforms="$(jq -c 'first(.target[]) | .platforms' <<< "${METADATA}")"
            echo targets="$(jq -nc --argjson arr "$(printf '%s\n' "${TARGETS}" | jq -R . | jq -s .)" '$arr')"
            echo variants="$(jq -nc --argjson arr "$(printf '%s\n' "${VARIANTS}" | jq -R . | jq -s .)" '$arr')"
          } >> "${GITHUB_OUTPUT}"
        env:
          GIT_HASH: ${{ github.sha }}
          DOCKER_IMAGE_VERSION: ${{ (github.ref_type == 'tag' && github.ref_name) || steps.check.outputs.ref || 'snapshot' }}

  build:
    runs-on: ${{ startsWith(matrix.platform, 'linux/arm') && 'ubuntu-24.04-arm' || 'ubuntu-24.04' }}

    if: ${{ !fromJson(needs.prepare.outputs.skip) }}

    needs:
      - prepare

    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.prepare.outputs.platforms) }}
        target: ${{ fromJson(needs.prepare.outputs.targets) }}
        variant: ${{ fromJson(needs.prepare.outputs.variants) }}

    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write

    steps:
      - name: Prepare
        id: prepare
        run: |
          platform=${{ matrix.platform }}
          echo "sanitized_platform=${platform//\//-}" >> "${GITHUB_OUTPUT}"

      - name: Checkout source
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.prepare.outputs.ref }}
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ matrix.platform }}

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Bake and push image
        id: build
        uses: docker/bake-action@v6
        with:
          source: .
          pull: true
          load: ${{ !fromJson(needs.prepare.outputs.push) }}
          sbom: ${{ fromJson(needs.prepare.outputs.sbom) }}
          provenance: ${{ fromJson(needs.prepare.outputs.provenance) }}
          targets: |
            ${{ matrix.variant }}-${{ matrix.target }}
          files: |
            docker-bake.hcl
          # Remove tags to prevent "can't push tagged ref [...] by digest" error
          set: |
            *.tags=
            *.platform=${{ matrix.platform }}
            ${{ matrix.variant }}-${{ matrix.target }}.cache-from=type=gha,scope=${{ matrix.variant }}-${{ matrix.target }}-${{ needs.prepare.outputs.ref || github.ref }}-${{ matrix.platform }}
            ${{ matrix.variant }}-${{ matrix.target }}.cache-from=type=gha,scope=refs/heads/main-${{ matrix.variant }}-${{ matrix.target }}-${{ matrix.platform }}
            ${{ matrix.variant }}-${{ matrix.target }}.cache-to=type=gha,scope=${{ matrix.variant }}-${{ matrix.target }}-${{ needs.prepare.outputs.ref || github.ref }}-${{ matrix.platform }},ignore-error=true
            ${{ matrix.variant }}-${{ matrix.target }}.cache-to=type=local,dest=./build-cache/${{ matrix.variant }}-${{ matrix.target }},mode=max,ignore-error=true
            ${{ fromJson(needs.prepare.outputs.push) && format('*.output=type=image,name={0},push-by-digest=true,name-canonical=true,push=true', env.DOCKER_IMAGE_NAME) || '' }}
        env:
          GIT_HASH: ${{ github.sha }}
          DOCKER_IMAGE_VERSION: ${{ (github.ref_type == 'tag' && github.ref_name) || needs.prepare.outputs.ref || 'snapshot' }}

      - # Workaround for https://github.com/actions/runner/pull/2477#issuecomment-1501003600
        name: Export metadata
        if: fromJson(needs.prepare.outputs.push)
        run: |
          mkdir -p "/tmp/metadata/${{ matrix.variant }}-${{ matrix.target }}"
          digest=$(jq -r '."${{ matrix.variant }}-${{ matrix.target }}"."containerimage.digest"' <<< "${METADATA}")
          touch "/tmp/metadata/${{ matrix.variant }}-${{ matrix.target }}/${digest#sha256:}"
        env:
          METADATA: ${{ steps.build.outputs.metadata }}

      - name: Upload ${{ matrix.variant }}-${{ matrix.target }} metadata
        if: fromJson(needs.prepare.outputs.push)
        uses: actions/upload-artifact@v4
        with:
          name: metadata-${{ matrix.variant }}-${{ matrix.target }}-${{ steps.prepare.outputs.sanitized_platform }}-${{ github.sha }}
          path: /tmp/metadata/${{ matrix.variant }}-${{ matrix.target }}/*
          if-no-files-found: error
          retention-days: 1

      - name: Install buildctl
        run: |
          set +x
          mkdir -p $HOME/bin
          VERSION=0.23.2
          if [[ "$(uname -m)" == "x86_64" ]]; then
            ARCH=amd64
          elif [[ "$(uname -m)" == "aarch64" ]]; then
            ARCH=arm64
          else
            echo "Unsupported architecture"
            exit 1
          fi

          curl -fsSL https://github.com/moby/buildkit/releases/download/v${VERSION}/buildkit-v${VERSION}.linux-${ARCH}.tar.gz \
            -o buildkit.tar.gz

          tar -xzf buildkit.tar.gz --strip-components=1 -C $HOME/bin bin/buildctl
          rm buildkit.tar.gz

          echo "$HOME/bin" >> $GITHUB_PATH
          buildctl --version

      - name: Export attestations
        if: fromJson(needs.prepare.outputs.provenance)
        run: |
          mkdir -p artifacts/attestations
          buildctl build \
            --frontend dockerfile.v0 \
            --local context=. \
            --local dockerfile=. \
            --opt target=${{ matrix.variant }}-${{ matrix.target }} \
            --output type=image,name=smalswebtech/base-php:local,push=false \
            --cache-from type=local,src=./build-cache/${{ matrix.variant }}-${{ matrix.target }} \
            --cache-to type=local,dest=./build-cache/${{ matrix.variant }}-${{ matrix.target }},mode=max \
            --attestations type=provenance,mode=max,output=./artifacts/attestations/${{ matrix.variant }}-${{ matrix.target }}/provenance.jsonl \
            --attestations type=sbom,output=./artifacts/attestations/${{ matrix.variant }}-${{ matrix.target }}/sbom.json

      - name: Upload local attestations
        uses: actions/upload-artifact@v4
        with:
          name: slsa-artifacts-${{ matrix.variant }}-${{ matrix.target }}
          path: ./artifacts/attestations/${{ matrix.variant }}-${{ matrix.target }}
          if-no-files-found: error
          retention-days: 1

  # Adapted from https://docs.docker.com/build/ci/github-actions/multi-platform/
  push:
    runs-on: ubuntu-24.04

    permissions:
      id-token: write
      packages: write
      contents: read
      attestations: write

    needs:
      - prepare
      - build

    if: fromJson(needs.prepare.outputs.push)

    strategy:
      fail-fast: false
      matrix:
        target: ${{ fromJson(needs.prepare.outputs.targets) }}
        variant: ${{ fromJson(needs.prepare.outputs.variants) }}

    steps:
      - name: Download metadata
        uses: actions/download-artifact@v4
        with:
          pattern: metadata-${{ matrix.variant }}-${{ matrix.target }}-*
          path: /tmp/metadata
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
        with:
          registry: docker.io
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Create manifest list and push
        working-directory: /tmp/metadata
        run: |
          set -x
          # shellcheck disable=SC2046,SC2086
          docker buildx imagetools create $(jq -cr '.target."${{ matrix.variant }}-${{ matrix.target }}".tags | map("-t " + .) | join(" ")' <<< ${METADATA}) \
            $(printf "${DOCKER_IMAGE_NAME}@sha256:%s " *)
        env:
          METADATA: ${{ needs.prepare.outputs.metadata }}

      - name: Inspect image
        run: |
          set -x
          # shellcheck disable=SC2046,SC2086
          docker buildx imagetools inspect $(jq -cr '.target."${{ matrix.variant }}-${{ matrix.target }}".tags | first' <<< ${METADATA})
        env:
          METADATA: ${{ needs.prepare.outputs.metadata }}

      - name: Upload attestations to existing GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./artifacts/attestations/${{ matrix.variant }}-${{ matrix.target }}/*
          tag_name: ${{ github.ref_name }}   # le tag de la release existante
          overwrite: true                    # si les fichiers existent déjà, les remplacer
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}